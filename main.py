import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
try:
    from config import BOT_TOKEN
except ImportError:
    print("‚ùå –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏–∑ config.example.py")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'clan_bot.db'

def get_db_connection():
    return sqlite3.connect(DB_PATH, check_same_thread=False)

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            created_by INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subsections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            section_id INTEGER,
            name TEXT NOT NULL,
            description TEXT,
            created_by INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (section_id) REFERENCES sections (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subsection_id INTEGER,
            user_id INTEGER,
            user_name TEXT,
            title TEXT NOT NULL,
            content_type TEXT,
            content_text TEXT,
            image_file_id TEXT,
            link_url TEXT,
            link_title TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (subsection_id) REFERENCES subsections (id)
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    cursor.execute('''
        INSERT OR IGNORE INTO sections (id, name, description) 
        VALUES 
            (1, 'üìö –ì–∞–π–¥—ã –ø–æ –∏–≥—Ä–µ', '–ü–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'),
            (2, '‚öîÔ∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–±–æ—Ä–æ–∫', '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'),
            (3, 'üìù –ó–∞–º–µ—Ç–∫–∏ –∫–ª–∞–Ω–∞', '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∫–∏'),
            (4, 'üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏', '–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
    cursor.execute('''
        INSERT OR IGNORE INTO subsections (id, section_id, name, description) 
        VALUES 
            (1, 1, 'üéØ –û—Å–Ω–æ–≤—ã –∏–≥—Ä—ã', '–ë–∞–∑–æ–≤—ã–µ –≥–∞–π–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'),
            (2, 1, 'üèÜ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤'),
            (3, 2, '‚öîÔ∏è PvP —Å–±–æ—Ä–∫–∏', '–°–±–æ—Ä–∫–∏ –¥–ª—è –∞—Ä–µ–Ω—ã'),
            (4, 2, 'üêâ PvE —Å–±–æ—Ä–∫–∏', '–°–±–æ—Ä–∫–∏ –¥–ª—è –ø—Ä–æ—Ç–∏–≤ –±–æ—Å—Å–æ–≤'),
            (5, 3, 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è', '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–ª–∞–Ω–∞'),
            (6, 3, 'üí° –ò–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–ª–∞–Ω–∞'),
            (7, 4, 'üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã', '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –∏ —Å–æ—Ü—Å–µ—Ç–∏'),
            (8, 4, 'üõ†Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã')
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ Database initialized")

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data='create_section')],
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data='create_subsection_choose_section')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data='manage_content')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    user = update.effective_user
    welcome_text = (
        f'üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}, –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞ Sons of Garitos!\n\n'
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã, –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞!'
    )
    
    if update.message:
        update.message.reply_text(welcome_text, reply_markup=reply_markup)
    else:
        update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == 'view_sections':
        show_sections(query, context)
    elif query.data.startswith('view_section_'):
        show_subsections(query, context)
    elif query.data.startswith('view_subsection_'):
        show_subsection_posts(query, context)
    elif query.data.startswith('prev_post_') or query.data.startswith('next_post_'):
        navigate_posts(query, context)
    elif query.data == 'add_post_choose_section':
        add_post_choose_section(query, context)
    elif query.data.startswith('add_post_choose_subsection_'):
        add_post_choose_subsection(query, context)
    elif query.data.startswith('add_post_'):
        add_post_start(query, context)
    elif query.data == 'create_section':
        create_section(query, context)
    elif query.data == 'create_subsection_choose_section':
        create_subsection_choose_section(query, context)
    elif query.data.startswith('create_subsection_'):
        create_subsection(query, context)
    elif query.data == 'manage_content':
        manage_content(query, context)
    elif query.data == 'manage_sections':
        manage_sections(query, context)
    elif query.data.startswith('edit_section_'):
        edit_section(query, context)
    elif query.data.startswith('delete_section_'):
        delete_section(query, context)
    elif query.data.startswith('confirm_delete_section_'):
        confirm_delete_section(query, context)
    elif query.data.startswith('edit_subsection_'):
        edit_subsection(query, context)
    elif query.data.startswith('delete_subsection_'):
        delete_subsection(query, context)
    elif query.data.startswith('confirm_delete_subsection_'):
        confirm_delete_subsection(query, context)
    elif query.data.startswith('edit_post_'):
        edit_post(query, context)
    elif query.data.startswith('delete_post_'):
        delete_post(query, context)
    elif query.data.startswith('confirm_delete_post_'):
        confirm_delete_post(query, context)
    elif query.data == 'back_to_main':
        back_to_main(query, context)

def show_sections(query, context):
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    if not sections:
        query.edit_message_text("–†–∞–∑–¥–µ–ª—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
        return
    
    keyboard = []
    for section in sections:
        conn = get_db_connection()
        subs_count = conn.execute('SELECT COUNT(*) FROM subsections WHERE section_id = ?', (section[0],)).fetchone()[0]
        posts_count = conn.execute('''
            SELECT COUNT(*) FROM posts p 
            JOIN subsections s ON p.subsection_id = s.id 
            WHERE s.section_id = ?
        ''', (section[0],)).fetchone()[0]
        conn.close()
        
        keyboard.append([InlineKeyboardButton(
            f"{section[1]} ({subs_count} –ø–æ–¥—Ä–∞–∑., {posts_count} –∑–∞–ø.)", 
            callback_data=f"view_section_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def show_subsections(query, context):
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    subsections = conn.execute(
        'SELECT * FROM subsections WHERE section_id = ? ORDER BY id', 
        (section_id,)
    ).fetchall()
    conn.close()
    
    if not section:
        query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not subsections:
        keyboard = [
            [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"create_subsection_{section_id}")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"edit_section_{section_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"delete_section_{section_id}")],
            [InlineKeyboardButton("üìÇ –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data='view_sections')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(f"–í —Ä–∞–∑–¥–µ–ª–µ '{section[1]}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª!", reply_markup=reply_markup)
        return
    
    keyboard = []
    for subsection in subsections:
        conn = get_db_connection()
        posts_count = conn.execute('SELECT COUNT(*) FROM posts WHERE subsection_id = ?', (subsection[0],)).fetchone()[0]
        conn.close()
        
        keyboard.append([InlineKeyboardButton(
            f"{subsection[2]} ({posts_count} –∑–∞–ø.)", 
            callback_data=f"view_subsection_{subsection[0]}"
        )])
    
    keyboard.extend([
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"create_subsection_{section_id}")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"edit_section_{section_id}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"delete_section_{section_id}")],
        [InlineKeyboardButton("üìÇ –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data='view_sections')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(f"üìÅ –†–∞–∑–¥–µ–ª: {section[1]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def show_subsection_posts(query, context):
    subsection_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    posts = conn.execute(
        'SELECT * FROM posts WHERE subsection_id = ? ORDER BY created_at DESC', 
        (subsection_id,)
    ).fetchall()
    conn.close()
    
    if not posts:
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add_post_{subsection_id}")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"edit_subsection_{subsection_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"delete_subsection_{subsection_id}")],
            [InlineKeyboardButton("üìÅ –ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º", callback_data=f"view_section_{section[0]}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f"üìÅ –†–∞–∑–¥–µ–ª: {section[1]}\n"
            f"üìÇ –ü–æ–¥—Ä–∞–∑–¥–µ–ª: {subsection[2]}\n\n"
            f"–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å!",
            reply_markup=reply_markup
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    context.user_data['current_subsection'] = subsection_id
    context.user_data['current_post_index'] = 0
    context.user_data['posts'] = posts
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    show_post_navigation(query, context, posts[0], 0, len(posts), subsection, section)

def show_post_navigation(query, context, post, index, total, subsection, section):
    post_text = f"üìÅ {section[1]} ‚Üí {subsection[2]}\n\n"
    post_text += f"üìå {post[4]}\n\n"
    
    if post[6]:  # content_text
        post_text += f"{post[6]}\n\n"
    
    if post[8] and post[9]:  # link_url –∏ link_title
        post_text += f"üîó {post[9]}\n{post[8]}\n\n"
    
    post_text += f"üë§ –ê–≤—Ç–æ—Ä: {post[3]}\n"
    post_text += f"üìÖ {post[10]}\n"
    post_text += f"üìä ({index + 1}/{total})"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
    nav_buttons = []
    if index > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_post_{index}"))
    if index < total - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"next_post_{index}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.extend([
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"edit_post_{post[0]}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"delete_post_{post[0]}")],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add_post_{subsection[0]}")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"edit_subsection_{subsection[0]}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"delete_subsection_{subsection[0]}")],
        [InlineKeyboardButton("üìÅ –ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º", callback_data=f"view_section_{section[0]}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if post[7]:  # image_file_id
        query.edit_message_caption(caption=post_text, reply_markup=reply_markup)
    else:
        query.edit_message_text(post_text, reply_markup=reply_markup)

def navigate_posts(query, context):
    action = query.data.split('_')[0]  # 'prev' –∏–ª–∏ 'next'
    current_index = int(query.data.split('_')[-1])
    
    subsection_id = context.user_data['current_subsection']
    posts = context.user_data['posts']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    if action == 'prev':
        new_index = current_index - 1
    else:  # next
        new_index = current_index + 1
    
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    conn.close()
    
    context.user_data['current_post_index'] = new_index
    show_post_navigation(query, context, posts[new_index], new_index, len(posts), subsection, section)

def add_post_choose_section(query, context):
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    keyboard = []
    for section in sections:
        keyboard.append([InlineKeyboardButton(
            section[1], 
            callback_data=f"add_post_choose_subsection_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def add_post_choose_subsection(query, context):
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    subsections = conn.execute('SELECT * FROM subsections WHERE section_id = ? ORDER BY id', (section_id,)).fetchall()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    conn.close()
    
    if not subsections:
        query.edit_message_text(f"–í —Ä–∞–∑–¥–µ–ª–µ '{section[1]}' –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.")
        return
    
    keyboard = []
    for subsection in subsections:
        keyboard.append([InlineKeyboardButton(
            subsection[2], 
            callback_data=f"add_post_{subsection[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='add_post_choose_section')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–∑–¥–µ–ª:** {section[1]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def add_post_start(query, context):
    subsection_id = int(query.data.split('_')[-1])
    context.user_data['adding_post'] = {
        'subsection_id': subsection_id,
        'step': 'title'
    }
    
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    conn.close()
    
    query.edit_message_text(
        f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n"
        f"üìÅ –†–∞–∑–¥–µ–ª: {section[1]}\n"
        f"üìÇ –ü–æ–¥—Ä–∞–∑–¥–µ–ª: {subsection[2]}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∏:"
    )

def create_section(query, context):
    context.user_data['creating_section'] = True
    context.user_data['awaiting_section_name'] = True
    query.edit_message_text(
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:"
    )

def create_subsection_choose_section(query, context):
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    keyboard = []
    for section in sections:
        keyboard.append([InlineKeyboardButton(
            section[1], 
            callback_data=f"create_subsection_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("üìÅ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def create_subsection(query, context):
    section_id = int(query.data.split('_')[-1])
    context.user_data['creating_subsection'] = {'section_id': section_id}
    context.user_data['awaiting_subsection_name'] = True
    
    conn = get_db_connection()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    conn.close()
    
    query.edit_message_text(
        f"üìÅ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ:** {section[1]}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞:"
    )

def manage_content(query, context):
    keyboard = [
        [InlineKeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏", callback_data='manage_sections')],
        [InlineKeyboardButton("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º–∏", callback_data='manage_subsections')],
        [InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏", callback_data='manage_posts')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å:", reply_markup=reply_markup)

def manage_sections(query, context):
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    if not sections:
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data='create_section')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='manage_content')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text("–†–∞–∑–¥–µ–ª—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.", reply_markup=reply_markup)
        return
    
    keyboard = []
    for section in sections:
        keyboard.append([InlineKeyboardButton(
            f"‚úèÔ∏è {section[1]}", 
            callback_data=f"edit_section_{section[0]}"
        )])
        keyboard.append([InlineKeyboardButton(
            f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {section[1]}", 
            callback_data=f"delete_section_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data='create_section')])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='manage_content')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("üìö **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

def edit_section(query, context):
    section_id = int(query.data.split('_')[-1])
    context.user_data['editing_section'] = section_id
    context.user_data['awaiting_section_name'] = True
    
    conn = get_db_connection()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    conn.close()
    
    query.edit_message_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞**\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {section[1]}\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {section[2]}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:"
    )

def delete_section(query, context):
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    
    if not section:
        query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
    subs_count = conn.execute('SELECT COUNT(*) FROM subsections WHERE section_id = ?', (section_id,)).fetchone()[0]
    
    if subs_count > 0:
        conn.close()
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data=f"confirm_delete_section_{section_id}")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='manage_sections')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f"‚ö†Ô∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞**\n\n"
            f"–†–∞–∑–¥–µ–ª '{section[1]}' —Å–æ–¥–µ—Ä–∂–∏—Ç {subs_count} –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.\n"
            f"–í—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –∏ –∑–∞–ø–∏—Å–∏ –≤ –Ω–∏—Ö –±—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã!\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª?",
            reply_markup=reply_markup
        )
        return
    
    # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
    conn.execute('DELETE FROM sections WHERE id = ?', (section_id,))
    conn.commit()
    conn.close()
    
    query.edit_message_text(f"‚úÖ –†–∞–∑–¥–µ–ª '{section[1]}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    manage_sections(query, context)

def confirm_delete_section(query, context):
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    
    if not section:
        query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
    subsections = conn.execute('SELECT id FROM subsections WHERE section_id = ?', (section_id,)).fetchall()
    for subsection in subsections:
        conn.execute('DELETE FROM posts WHERE subsection_id = ?', (subsection[0],))
    
    conn.execute('DELETE FROM subsections WHERE section_id = ?', (section_id,))
    conn.execute('DELETE FROM sections WHERE id = ?', (section_id,))
    conn.commit()
    conn.close()
    
    query.edit_message_text(f"‚úÖ –†–∞–∑–¥–µ–ª '{section[1]}' –∏ –≤—Å–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    manage_sections(query, context)

def edit_subsection(query, context):
    subsection_id = int(query.data.split('_')[-1])
    context.user_data['editing_subsection'] = subsection_id
    context.user_data['awaiting_subsection_name'] = True
    
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    conn.close()
    
    query.edit_message_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞**\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {subsection[2]}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞:"
    )

def delete_subsection(query, context):
    subsection_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    
    if not subsection:
        query.edit_message_text("‚ùå –ü–æ–¥—Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏
    posts_count = conn.execute('SELECT COUNT(*) FROM posts WHERE subsection_id = ?', (subsection_id,)).fetchone()[0]
    
    if posts_count > 0:
        conn.close()
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data=f"confirm_delete_subsection_{subsection_id}")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"view_section_{subsection[1]}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f"‚ö†Ô∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞**\n\n"
            f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª '{subsection[2]}' —Å–æ–¥–µ—Ä–∂–∏—Ç {posts_count} –∑–∞–ø–∏—Å–µ–π.\n"
            f"–í—Å–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã!\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª?",
            reply_markup=reply_markup
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π
    conn.execute('DELETE FROM subsections WHERE id = ?', (subsection_id,))
    conn.commit()
    conn.close()
    
    query.edit_message_text(f"‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª '{subsection[2]}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    show_subsections(query, context)

def confirm_delete_subsection(query, context):
    subsection_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    
    if not subsection:
        query.edit_message_text("‚ùå –ü–æ–¥—Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    conn.execute('DELETE FROM posts WHERE subsection_id = ?', (subsection_id,))
    conn.execute('DELETE FROM subsections WHERE id = ?', (subsection_id,))
    conn.commit()
    conn.close()
    
    query.edit_message_text(f"‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª '{subsection[2]}' –∏ –≤—Å–µ –µ–≥–æ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    show_subsections(query, context)

def edit_post(query, context):
    post_id = int(query.data.split('_')[-1])
    context.user_data['editing_post'] = post_id
    context.user_data['awaiting_post_title'] = True
    
    conn = get_db_connection()
    post = conn.execute('SELECT * FROM posts WHERE id = ?', (post_id,)).fetchone()
    conn.close()
    
    query.edit_message_text(
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n"
        f"–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {post[4]}\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {post[6] if post[6] else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∏:"
    )

def delete_post(query, context):
    post_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    post = conn.execute('SELECT * FROM posts WHERE id = ?', (post_id,)).fetchone()
    
    if not post:
        query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        conn.close()
        return
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_post_{post_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"view_subsection_{post[1]}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        f"‚ö†Ô∏è **–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {post[4]}\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?",
        reply_markup=reply_markup
    )

def confirm_delete_post(query, context):
    post_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    post = conn.execute('SELECT * FROM posts WHERE id = ?', (post_id,)).fetchone()
    
    if not post:
        query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        conn.close()
        return
    
    subsection_id = post[1]
    conn.execute('DELETE FROM posts WHERE id = ?', (post_id,))
    conn.commit()
    conn.close()
    
    query.edit_message_text(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    show_subsection_posts(query, context)

def back_to_main(query, context):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data='create_section')],
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data='create_subsection_choose_section')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data='manage_content')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text('üè∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞:', reply_markup=reply_markup)

def handle_message(update: Update, context: CallbackContext):
    user_data = context.user_data
    user = update.effective_user
    
    if user_data.get('adding_post'):
        post_data = user_data['adding_post']
        
        if post_data['step'] == 'title':
            post_data['title'] = update.message.text
            post_data['step'] = 'content_text'
            
            update.message.reply_text(
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {post_data['title']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:"
            )
        
        elif post_data['step'] == 'content_text':
            post_data['content_text'] = update.message.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO posts (subsection_id, user_id, user_name, title, content_type, content_text)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                post_data['subsection_id'],
                user.id,
                user.first_name,
                post_data['title'],
                'text',
                post_data['content_text']
            ))
            conn.commit()
            conn.close()
            
            user_data.clear()
            update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            back_to_main_message(update, context)
    
    elif user_data.get('awaiting_subsection_name'):
        subsection_name = update.message.text
        
        if user_data.get('editing_subsection'):
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
            subsection_id = user_data['editing_subsection']
            conn = get_db_connection()
            conn.execute('UPDATE subsections SET name = ? WHERE id = ?', (subsection_name, subsection_id))
            conn.commit()
            conn.close()
            
            user_data.clear()
            update.message.reply_text(f"‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª '{subsection_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
            section_id = user_data['creating_subsection']['section_id']
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO subsections (section_id, name, description, created_by) VALUES (?, ?, ?, ?)',
                (section_id, subsection_name, "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞", user.id)
            )
            conn.commit()
            conn.close()
            
            user_data.clear()
            update.message.reply_text(f"‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª '{subsection_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        
        back_to_main_message(update, context)
    
    elif user_data.get('awaiting_section_name'):
        section_name = update.message.text
        
        if user_data.get('editing_section'):
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            section_id = user_data['editing_section']
            conn = get_db_connection()
            conn.execute('UPDATE sections SET name = ? WHERE id = ?', (section_name, section_id))
            conn.commit()
            conn.close()
            
            user_data.clear()
            update.message.reply_text(f"‚úÖ –†–∞–∑–¥–µ–ª '{section_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO sections (name, description, created_by) VALUES (?, ?, ?)',
                (section_name, "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞", user.id)
            )
            conn.commit()
            conn.close()
            
            user_data.clear()
            update.message.reply_text(f"‚úÖ –†–∞–∑–¥–µ–ª '{section_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        
        back_to_main_message(update, context)
    
    elif user_data.get('awaiting_post_title'):
        new_title = update.message.text
        post_id = user_data['editing_post']
        
        context.user_data['awaiting_post_title'] = False
        context.user_data['awaiting_post_content'] = True
        context.user_data['new_post_title'] = new_title
        
        update.message.reply_text(
            f"üìù –ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {new_title}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:"
        )
    
    elif user_data.get('awaiting_post_content'):
        new_content = update.message.text
        post_id = user_data['editing_post']
        new_title = user_data['new_post_title']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        conn = get_db_connection()
        conn.execute(
            'UPDATE posts SET title = ?, content_text = ? WHERE id = ?',
            (new_title, new_content, post_id)
        )
        conn.commit()
        conn.close()
        
        user_data.clear()
        update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        back_to_main_message(update, context)
    
    else:
        update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é.")

def back_to_main_message(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data='create_section')],
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data='create_subsection_choose_section')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data='manage_content')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('üè∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞:', reply_markup=reply_markup)

def handle_photo(update: Update, context: CallbackContext):
    user_data = context.user_data
    
    if user_data.get('adding_post'):
        post_data = user_data['adding_post']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo = update.message.photo[-1]
        post_data['image_file_id'] = photo.file_id
        
        update.message.reply_text("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:")

def main():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.py
    TOKEN = BOT_TOKEN
    
    if not TOKEN or TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config.py")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –°–æ–∑–¥–∞–µ–º updater –∏ dispatcher
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CallbackQueryHandler(button_handler))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        dp.add_handler(MessageHandler(Filters.photo, handle_photo))
        
        print("‚úÖ Bot started successfully!")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()