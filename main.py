import os
import logging
import time
import subprocess
import requests
from flask import Flask, request, jsonify
from threading import Thread
import multiprocessing
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Sons of Garitos Bot is running!"

@app.route('/health')
def health():
    return "‚úÖ OK"

@app.route('/ping')
def ping():
    return "üèì Pong"

@app.route('/restart')
def restart():
    """–†—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    print("üîÑ Manual restart triggered")
    Thread(target=delayed_restart, daemon=True).start()
    return "Restarting..."

@app.route('/github-webhook', methods=['POST'])
def github_webhook():
    """Webhook –¥–ª—è GitHub"""
    try:
        if request.headers.get('X-GitHub-Event') == 'push':
            print("üîÑ GitHub push received, pulling changes and restarting...")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            data = request.json
            if data:
                repo_name = data.get('repository', {}).get('name', 'Unknown')
                commit_message = data.get('head_commit', {}).get('message', 'No message')
                print(f"üì¶ Repository: {repo_name}")
                print(f"üìù Commit: {commit_message}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
            result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
            print(f"üîß Git pull result: {result.stdout}")
            if result.stderr:
                print(f"‚ùå Git pull error: {result.stderr}")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            Thread(target=delayed_restart, daemon=True).start()
            
            return jsonify({"status": "success", "message": "Update triggered"})
        
        return jsonify({"status": "ignored", "message": "Not a push event"})
    
    except Exception as e:
        print(f"‚ùå Webhook error: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/update')
def update():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    print("üîÑ Forced update triggered")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
    result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
    print(f"üîß Git pull result: {result.stdout}")
    if result.stderr:
        print(f"‚ùå Git pull error: {result.stderr}")
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    Thread(target=delayed_restart, daemon=True).start()
    
    return "Updating and restarting..."

@app.route('/check-updates')
def check_updates():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    try:
        print("üîç Checking for updates...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        result = subprocess.run(['git', 'fetch'], capture_output=True, text=True)
        status_result = subprocess.run(['git', 'status', '-uno'], capture_output=True, text=True)
        
        has_updates = "Your branch is behind" in status_result.stdout
        
        if has_updates:
            return jsonify({
                "status": "updates_available",
                "message": "–î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
            })
        else:
            return jsonify({
                "status": "up_to_date", 
                "message": "–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏."
            })
            
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}"
        }), 500

def delayed_restart():
    """–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    time.sleep(2)
    print("üîÑ Restarting bot...")
    os._exit(0)

def check_updates_on_start():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("üîç Checking for updates on startup...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
        print(f"üîß Git pull result: {result.stdout}")
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if "Already up to date" not in result.stdout:
            print("üîÑ Updates were applied on startup")
            return True
        else:
            print("‚úÖ Bot is up to date")
            return False
            
    except Exception as e:
        print(f"‚ùå Update check error: {e}")
        return False

def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    time.sleep(10)
    
    while True:
        try:
            # –ü–∏–Ω–≥—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤–º–µ—Å—Ç–æ –≤–Ω–µ—à–Ω–µ–≥–æ URL
            response = requests.get('http://localhost:5000/ping', timeout=5)
            print(f"üîÑ Keep-alive ping: {response.status_code} - {time.strftime('%Y-%m-%d %H:%M:%S')}")
            
        except Exception as e:
            print(f"‚ùå Keep-alive error: {e}")
        
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    import asyncio
    from bot import setup_bot
    
    async def bot_main():
        TOKEN = os.environ.get('BOT_TOKEN')
        
        if not TOKEN:
            print("‚ùå BOT_TOKEN not found!")
            return
        
        try:
            application = await setup_bot(TOKEN)
            print("‚úÖ Bot process started successfully!")
            await application.run_polling()
        except Exception as e:
            print(f"‚ùå Bot process error: {e}")
            import traceback
            traceback.print_exc()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π event loop
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(bot_main())
    except KeyboardInterrupt:
        print("üõë Bot process stopped")
    except Exception as e:
        print(f"‚ùå Bot process failed: {e}")

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Starting Flask server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    updates_applied = check_updates_on_start()
    
    if updates_applied:
        print("üîÑ Restarting to apply updates...")
        time.sleep(2)
        os._exit(0)
    
    # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask, daemon=True).start()
    print("‚úÖ Flask server started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=keep_alive, daemon=True).start()
    print("‚úÖ Keep-alive started")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    print("ü§ñ Starting Telegram Bot in separate process...")
    bot_process = multiprocessing.Process(target=run_bot)
    bot_process.daemon = True
    bot_process.start()
    
    print("‚úÖ All services started successfully!")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    try:
        while True:
            time.sleep(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤ –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞
            if not bot_process.is_alive():
                print("‚ùå Bot process died, restarting...")
                bot_process = multiprocessing.Process(target=run_bot)
                bot_process.daemon = True
                bot_process.start()
                print("‚úÖ Bot process restarted")
                
    except KeyboardInterrupt:
        print("üõë Shutting down...")
        if bot_process.is_alive():
            bot_process.terminate()
        sys.exit(0)

if __name__ == '__main__':
    main()
    
