import os
import logging
import time
import subprocess
import requests
from flask import Flask, request, jsonify
from threading import Thread
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Sons of Garitos Bot is running!"

@app.route('/health')
def health():
    return "‚úÖ OK"

@app.route('/ping')
def ping():
    return "üèì Pong"

@app.route('/restart')
def restart():
    """–†—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    print("üîÑ Manual restart triggered")
    Thread(target=delayed_restart, daemon=True).start()
    return "Restarting..."

@app.route('/github-webhook', methods=['POST'])
def github_webhook():
    """Webhook –¥–ª—è GitHub"""
    try:
        if request.headers.get('X-GitHub-Event') == 'push':
            print("üîÑ GitHub push received, pulling changes and restarting...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
            result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
            print(f"üîß Git pull result: {result.stdout}")
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            Thread(target=delayed_restart, daemon=True).start()
            
            return jsonify({"status": "success", "message": "Update triggered"})
        
        return jsonify({"status": "ignored", "message": "Not a push event"})
    
    except Exception as e:
        print(f"‚ùå Webhook error: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/update')
def update():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    print("üîÑ Forced update triggered")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
    result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
    print(f"üîß Git pull result: {result.stdout}")
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    Thread(target=delayed_restart, daemon=True).start()
    
    return "Updating and restarting..."

def delayed_restart():
    """–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    time.sleep(2)
    print("üîÑ Restarting bot...")
    os._exit(0)

def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    time.sleep(10)
    
    while True:
        try:
            # –ü–∏–Ω–≥—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤–º–µ—Å—Ç–æ –≤–Ω–µ—à–Ω–µ–≥–æ URL
            response = requests.get('http://localhost:8080/ping', timeout=5)
            print(f"üîÑ Keep-alive ping: {response.status_code}")
            
        except Exception as e:
            print(f"‚ùå Keep-alive error: {e}")
        
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç

def auto_updater():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
    time.sleep(60)
    
    while True:
        try:
            print("üîÑ Auto-update check...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
            print(f"üîß Git pull result: {result.stdout}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            if "Already up to date" not in result.stdout:
                print("üîÑ New updates found, restarting...")
                time.sleep(5)
                os._exit(0)
                
        except Exception as e:
            print(f"‚ùå Auto-update error: {e}")
        
        time.sleep(1800)  # 30 –º–∏–Ω—É—Ç

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get('PORT', 8080))
    print(f"üöÄ Starting Flask server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
Thread(target=run_flask, daemon=True).start()
print("‚úÖ Flask server started")

# –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
Thread(target=keep_alive, daemon=True).start()
print("‚úÖ Keep-alive started")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ-–∞–ø–¥–µ–π—Ç–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
Thread(target=auto_updater, daemon=True).start()
print("‚úÖ Auto-updater started")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
async def main():
    # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(3)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.environ.get('BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå BOT_TOKEN not found in environment variables!")
        print("üí° Please add BOT_TOKEN to Replit Secrets")
        return
    
    print(f"‚úÖ Bot token found: {TOKEN[:10]}...")
    
    try:
        from bot import setup_bot
        application = await setup_bot(TOKEN)
        
        print("‚úÖ Bot started successfully!")
        await application.run_polling()
        
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
        import traceback
        traceback.print_exc()
        
        print("üîÑ Restarting in 10 seconds...")
        time.sleep(10)
        os._exit(1)

if __name__ == '__main__':
    print("ü§ñ Starting Sons of Garitos Bot...")
    asyncio.run(main())
    
