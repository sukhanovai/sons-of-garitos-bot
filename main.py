import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
from stay_alive import keep_alive

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'clan_bot.db'

def get_db_connection():
    return sqlite3.connect(DB_PATH, check_same_thread=False)

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            created_by INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subsections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            section_id INTEGER,
            name TEXT NOT NULL,
            description TEXT,
            created_by INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (section_id) REFERENCES sections (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subsection_id INTEGER,
            user_id INTEGER,
            user_name TEXT,
            title TEXT NOT NULL,
            content_type TEXT,
            content_text TEXT,
            image_file_id TEXT,
            link_url TEXT,
            link_title TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (subsection_id) REFERENCES subsections (id)
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    cursor.execute('''
        INSERT OR IGNORE INTO sections (id, name, description) 
        VALUES 
            (1, 'üìö –ì–∞–π–¥—ã –ø–æ –∏–≥—Ä–µ', '–ü–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'),
            (2, '‚öîÔ∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–±–æ—Ä–æ–∫', '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'),
            (3, 'üìù –ó–∞–º–µ—Ç–∫–∏ –∫–ª–∞–Ω–∞', '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∫–∏'),
            (4, 'üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏', '–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
    cursor.execute('''
        INSERT OR IGNORE INTO subsections (id, section_id, name, description) 
        VALUES 
            (1, 1, 'üéØ –û—Å–Ω–æ–≤—ã –∏–≥—Ä—ã', '–ë–∞–∑–æ–≤—ã–µ –≥–∞–π–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'),
            (2, 1, 'üèÜ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤'),
            (3, 2, '‚öîÔ∏è PvP —Å–±–æ—Ä–∫–∏', '–°–±–æ—Ä–∫–∏ –¥–ª—è –∞—Ä–µ–Ω—ã'),
            (4, 2, 'üêâ PvE —Å–±–æ—Ä–∫–∏', '–°–±–æ—Ä–∫–∏ –¥–ª—è –ø—Ä–æ—Ç–∏–≤ –±–æ—Å—Å–æ–≤'),
            (5, 3, 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è', '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–ª–∞–Ω–∞'),
            (6, 3, 'üí° –ò–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–ª–∞–Ω–∞'),
            (7, 4, 'üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã', '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –∏ —Å–æ—Ü—Å–µ—Ç–∏'),
            (8, 4, 'üõ†Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã')
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ Database initialized")

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        'üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞ Sons of Garitos!\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == 'view_sections':
        show_sections(query, context)
    elif query.data.startswith('view_section_'):
        show_subsections(query, context)
    elif query.data.startswith('view_subsection_'):
        show_subsection_posts(query, context)
    elif query.data == 'add_post_choose_section':
        add_post_choose_section(query, context)
    elif query.data.startswith('add_post_choose_subsection_'):
        add_post_choose_subsection(query, context)
    elif query.data.startswith('add_post_'):
        add_post_start(query, context)
    elif query.data == 'back_to_main':
        back_to_main(query, context)

def show_sections(query, context):
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    if not sections:
        query.edit_message_text("–†–∞–∑–¥–µ–ª—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
        return
    
    keyboard = []
    for section in sections:
        keyboard.append([InlineKeyboardButton(
            section[1], 
            callback_data=f"view_section_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def show_subsections(query, context):
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    subsections = conn.execute(
        'SELECT * FROM subsections WHERE section_id = ? ORDER BY id', 
        (section_id,)
    ).fetchall()
    conn.close()
    
    if not subsections:
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add_post_choose_subsection_{section_id}")],
            [InlineKeyboardButton("üìÇ –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data='view_sections')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(f"–í —Ä–∞–∑–¥–µ–ª–µ '{section[1]}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.", reply_markup=reply_markup)
        return
    
    keyboard = []
    for subsection in subsections:
        conn = get_db_connection()
        posts_count = conn.execute('SELECT COUNT(*) FROM posts WHERE subsection_id = ?', (subsection[0],)).fetchone()[0]
        conn.close()
        
        keyboard.append([InlineKeyboardButton(
            f"{subsection[2]} ({posts_count} –∑–∞–ø.)", 
            callback_data=f"view_subsection_{subsection[0]}"
        )])
    
    keyboard.extend([
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add_post_choose_subsection_{section_id}")],
        [InlineKeyboardButton("üìÇ –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data='view_sections')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(f"üìÅ –†–∞–∑–¥–µ–ª: {section[1]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def show_subsection_posts(query, context):
    subsection_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    posts = conn.execute(
        'SELECT * FROM posts WHERE subsection_id = ? ORDER BY created_at DESC', 
        (subsection_id,)
    ).fetchall()
    conn.close()
    
    if not posts:
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add_post_{subsection_id}")],
            [InlineKeyboardButton("üìÅ –ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º", callback_data=f"view_section_{section[0]}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            f"üìÅ –†–∞–∑–¥–µ–ª: {section[1]}\n"
            f"üìÇ –ü–æ–¥—Ä–∞–∑–¥–µ–ª: {subsection[2]}\n\n"
            f"–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å!",
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    post = posts[0]
    post_text = f"üìÅ {section[1]} ‚Üí {subsection[2]}\n\n"
    post_text += f"üìå {post[4]}\n\n"
    
    if post[6]:  # content_text
        post_text += f"{post[6]}\n\n"
    
    if post[8] and post[9]:  # link_url –∏ link_title
        post_text += f"üîó {post[9]}\n{post[8]}\n\n"
    
    post_text += f"üë§ –ê–≤—Ç–æ—Ä: {post[3]}\n"
    post_text += f"üìÖ {post[10]}\n"
    post_text += f"üìä (1/{len(posts)})"
    
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add_post_{subsection_id}")],
        [InlineKeyboardButton("üìÅ –ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º", callback_data=f"view_section_{section[0]}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if post[7]:  # image_file_id
        query.edit_message_caption(caption=post_text, reply_markup=reply_markup)
    else:
        query.edit_message_text(post_text, reply_markup=reply_markup)

def add_post_choose_section(query, context):
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    keyboard = []
    for section in sections:
        keyboard.append([InlineKeyboardButton(
            section[1], 
            callback_data=f"add_post_choose_subsection_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def add_post_choose_subsection(query, context):
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    subsections = conn.execute('SELECT * FROM subsections WHERE section_id = ? ORDER BY id', (section_id,)).fetchall()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    conn.close()
    
    if not subsections:
        query.edit_message_text(f"–í —Ä–∞–∑–¥–µ–ª–µ '{section[1]}' –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.")
        return
    
    keyboard = []
    for subsection in subsections:
        keyboard.append([InlineKeyboardButton(
            subsection[2], 
            callback_data=f"add_post_{subsection[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='add_post_choose_section')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–∑–¥–µ–ª:** {section[1]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def add_post_start(query, context):
    subsection_id = int(query.data.split('_')[-1])
    context.user_data['adding_post'] = {
        'subsection_id': subsection_id,
        'step': 'title'
    }
    
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    conn.close()
    
    query.edit_message_text(
        f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n"
        f"üìÅ –†–∞–∑–¥–µ–ª: {section[1]}\n"
        f"üìÇ –ü–æ–¥—Ä–∞–∑–¥–µ–ª: {subsection[2]}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∏:"
    )

def back_to_main(query, context):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text('üè∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞:', reply_markup=reply_markup)

def handle_message(update: Update, context: CallbackContext):
    user_data = context.user_data
    user = update.effective_user
    
    if user_data.get('adding_post'):
        post_data = user_data['adding_post']
        
        if post_data['step'] == 'title':
            post_data['title'] = update.message.text
            post_data['step'] = 'content_text'
            
            update.message.reply_text(
                f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {post_data['title']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:"
            )
        
        elif post_data['step'] == 'content_text':
            post_data['content_text'] = update.message.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO posts (subsection_id, user_id, user_name, title, content_type, content_text)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                post_data['subsection_id'],
                user.id,
                user.first_name,
                post_data['title'],
                'text',
                post_data['content_text']
            ))
            conn.commit()
            conn.close()
            
            user_data.clear()
            update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text('üè∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=reply_markup)

def handle_photo(update: Update, context: CallbackContext):
    user_data = context.user_data
    
    if user_data.get('adding_post'):
        post_data = user_data['adding_post']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        photo = update.message.photo[-1]
        post_data['image_file_id'] = photo.file_id
        
        update.message.reply_text("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:")

def main():
    TOKEN = os.environ.get('BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå BOT_TOKEN not found!")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –°–æ–∑–¥–∞–µ–º updater –∏ dispatcher
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CallbackQueryHandler(button_handler))
        dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        dp.add_handler(MessageHandler(Filters.photo, handle_photo))
        
        print("‚úÖ Bot started successfully!")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
