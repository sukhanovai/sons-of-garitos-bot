import os
import logging
import time
import subprocess
import requests
from flask import Flask, request, jsonify
import asyncio
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

app = Flask(__name__)

@app.route('/')
def home():
    return "ü§ñ Sons of Garitos Bot is running!"

@app.route('/health')
def health():
    return "‚úÖ OK"

@app.route('/ping')
def ping():
    return "üèì Pong"

@app.route('/restart')
def restart():
    """–†—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    print("üîÑ Manual restart triggered")
    return "Restarting... (Please restart manually via Replit interface)"

@app.route('/github-webhook', methods=['POST'])
def github_webhook():
    """Webhook –¥–ª—è GitHub"""
    try:
        if request.headers.get('X-GitHub-Event') == 'push':
            print("üîÑ GitHub push received, pulling changes...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
            result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
            print(f"üîß Git pull result: {result.stdout}")
            if result.stderr:
                print(f"‚ùå Git pull error: {result.stderr}")
            
            return jsonify({"status": "success", "message": "Updates pulled. Please restart manually."})
        
        return jsonify({"status": "ignored", "message": "Not a push event"})
    
    except Exception as e:
        print(f"‚ùå Webhook error: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/update')
def update():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
    print("üîÑ Forced update triggered")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
    result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
    print(f"üîß Git pull result: {result.stdout}")
    if result.stderr:
        print(f"‚ùå Git pull error: {result.stderr}")
    
    return "Updates pulled. Please restart manually via Replit interface."

@app.route('/check-updates')
def check_updates():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    try:
        print("üîç Checking for updates...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        result = subprocess.run(['git', 'fetch'], capture_output=True, text=True)
        status_result = subprocess.run(['git', 'status', '-uno'], capture_output=True, text=True)
        
        has_updates = "Your branch is behind" in status_result.stdout
        
        if has_updates:
            return jsonify({
                "status": "updates_available",
                "message": "–î–æ—Å—Ç—É–ø–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /update –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
            })
        else:
            return jsonify({
                "status": "up_to_date", 
                "message": "–ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏."
            })
            
    except Exception as e:
        return jsonify({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}"
        }), 500

def check_updates_on_start():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("üîç Checking for updates on startup...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        result = subprocess.run(['git', 'pull'], capture_output=True, text=True)
        print(f"üîß Git pull result: {result.stdout}")
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if "Already up to date" not in result.stdout:
            print("üîÑ Updates were applied on startup")
            return True
        else:
            print("‚úÖ Bot is up to date")
            return False
            
    except Exception as e:
        print(f"‚ùå Update check error: {e}")
        return False

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = os.environ.get('BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå BOT_TOKEN not found!")
        return
    
    try:
        from bot import setup_bot
        application = await setup_bot(TOKEN)
        print("‚úÖ Bot started successfully!")
        await application.run_polling()
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
        import traceback
        traceback.print_exc()
        # –ù–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        sys.exit(1)

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get('PORT', 5000))
    print(f"üöÄ Starting Flask server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    updates_applied = check_updates_on_start()
    
    if updates_applied:
        print("üîÑ Please restart the bot to apply updates")
        return
    
    print("ü§ñ Starting Sons of Garitos Bot...")
    
    # –í Replit –º—ã –Ω–µ –º–æ–∂–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å Flask –∏ –±–æ—Ç–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑-–∑–∞ event loop
    # –î–∞–≤–∞–π—Ç–µ —Å–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –∑–∞–ø—É—Å–∫–∞—Ç—å
    
    print("\n" + "="*50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
    print("1 - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞")
    print("2 - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Flask —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤)")
    print("3 - –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–∞ (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)")
    print("="*50)
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3): ").strip()
    
    if choice == "1":
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞
        print("üöÄ Starting Telegram Bot only...")
        asyncio.run(run_bot())
    elif choice == "2":
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Flask
        print("üöÄ Starting Flask server only...")
        run_flask()
    elif choice == "3":
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–∞ (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
        print("üöÄ Trying to start both services...")
        import threading
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        time.sleep(3)
        asyncio.run(run_bot())
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫–∞—é —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞...")
        asyncio.run(run_bot())

if __name__ == '__main__':
    main()
