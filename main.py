import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = 'clan_bot.db'

def get_db_connection():
    return sqlite3.connect(DB_PATH, check_same_thread=False)

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            created_by INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subsections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            section_id INTEGER,
            name TEXT NOT NULL,
            description TEXT,
            created_by INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (section_id) REFERENCES sections (id)
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    cursor.execute('''
        INSERT OR IGNORE INTO sections (id, name, description) 
        VALUES 
            (1, 'üìö –ì–∞–π–¥—ã –ø–æ –∏–≥—Ä–µ', '–ü–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'),
            (2, '‚öîÔ∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–±–æ—Ä–æ–∫', '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'),
            (3, 'üìù –ó–∞–º–µ—Ç–∫–∏ –∫–ª–∞–Ω–∞', '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∫–∏'),
            (4, 'üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏', '–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ Database initialized")

def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post')],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        'üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞ Sons of Garitos!\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == 'view_sections':
        conn = get_db_connection()
        sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
        conn.close()
        
        if not sections:
            query.edit_message_text("–†–∞–∑–¥–µ–ª—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
            return
        
        keyboard = []
        for section in sections:
            keyboard.append([InlineKeyboardButton(
                section[1], 
                callback_data=f"view_section_{section[0]}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    
    elif query.data.startswith('view_section_'):
        section_id = int(query.data.split('_')[-1])
        
        conn = get_db_connection()
        section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
        subsections = conn.execute(
            'SELECT * FROM subsections WHERE section_id = ? ORDER BY id', 
            (section_id,)
        ).fetchall()
        conn.close()
        
        if not subsections:
            query.edit_message_text(f"–í —Ä–∞–∑–¥–µ–ª–µ '{section[1]}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.")
            return
        
        keyboard = []
        for subsection in subsections:
            keyboard.append([InlineKeyboardButton(
                subsection[2], 
                callback_data=f"view_subsection_{subsection[0]}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(f"üìÅ –†–∞–∑–¥–µ–ª: {section[1]}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

def main():
    TOKEN = os.environ.get('BOT_TOKEN')
    
    if not TOKEN:
        print("‚ùå BOT_TOKEN not found!")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –°–æ–∑–¥–∞–µ–º updater –∏ dispatcher
        updater = Updater(TOKEN, use_context=True)
        dp = updater.dispatcher
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CallbackQueryHandler(button_handler))
        
        print("‚úÖ Bot started successfully!")
        updater.start_polling()
        updater.idle()
        
    except Exception as e:
        print(f"‚ùå Bot error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
