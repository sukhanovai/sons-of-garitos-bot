import sqlite3
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è Replit
DB_PATH = os.path.join(os.getcwd(), 'clan_bot.db')

def get_db_connection():
    return sqlite3.connect(DB_PATH, check_same_thread=False)

def init_db():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sections (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT,
                created_by INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS subsections (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                section_id INTEGER,
                name TEXT NOT NULL,
                description TEXT,
                created_by INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (section_id) REFERENCES sections (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS posts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                subsection_id INTEGER,
                user_id INTEGER,
                user_name TEXT,
                title TEXT NOT NULL,
                content_type TEXT CHECK(content_type IN ('text', 'image', 'link', 'mixed')),
                content_text TEXT,
                image_file_id TEXT,
                link_url TEXT,
                link_title TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (subsection_id) REFERENCES subsections (id)
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        cursor.execute('''
            INSERT OR IGNORE INTO sections (id, name, description) 
            VALUES 
                (1, 'üìö –ì–∞–π–¥—ã –ø–æ –∏–≥—Ä–µ', '–ü–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'),
                (2, '‚öîÔ∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–±–æ—Ä–æ–∫', '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'),
                (3, 'üìù –ó–∞–º–µ—Ç–∫–∏ –∫–ª–∞–Ω–∞', '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∫–∏'),
                (4, 'üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏', '–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
        cursor.execute('''
            INSERT OR IGNORE INTO subsections (id, section_id, name, description) 
            VALUES 
                (1, 1, 'üéØ –û—Å–Ω–æ–≤—ã –∏–≥—Ä—ã', '–ë–∞–∑–æ–≤—ã–µ –≥–∞–π–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'),
                (2, 1, 'üèÜ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤'),
                (3, 2, '‚öîÔ∏è PvP —Å–±–æ—Ä–∫–∏', '–°–±–æ—Ä–∫–∏ –¥–ª—è –∞—Ä–µ–Ω—ã'),
                (4, 2, 'üêâ PvE —Å–±–æ—Ä–∫–∏', '–°–±–æ—Ä–∫–∏ –¥–ª—è –ø—Ä–æ—Ç–∏–≤ –±–æ—Å—Å–æ–≤'),
                (5, 3, 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è', '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–ª–∞–Ω–∞'),
                (6, 3, 'üí° –ò–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–ª–∞–Ω–∞'),
                (7, 4, 'üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã', '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –∏ —Å–æ—Ü—Å–µ—Ç–∏'),
                (8, 4, 'üõ†Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã')
        ''')
        
        conn.commit()
        conn.close()
        print(f"‚úÖ Database initialized at: {DB_PATH}")
        
    except Exception as e:
        print(f"‚ùå Database initialization error: {e}")
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        raise context.error
    except Exception as e:
        error_msg = str(e)
        print(f"‚ö†Ô∏è Error handled: {error_msg}")
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö callback queries
        if "Query is too old" in error_msg or "query id is invalid" in error_msg:
            return
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            except:
                pass

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
def safe_get(data, index, default="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    if data and len(data) > index:
        return data[index]
    return default

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data='create_section')],
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data='create_subsection_choose_section')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data='manage_content')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    user = update.effective_user
    if update.message:
        await update.message.reply_text(
            f'üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}, –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞ Sons of Garitos!\n\n'
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã, –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞!',
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(
            f'üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}, –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞ Sons of Garitos!\n\n'
            '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã, –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞!',
            reply_markup=reply_markup
        )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–¥–µ–ª–æ–≤
async def view_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass
    
    conn = get_db_connection()
    cursor = conn.cursor()
    sections = cursor.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    if not sections:
        await query.edit_message_text("–†–∞–∑–¥–µ–ª—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
        return
    
    keyboard = []
    for section in sections:
        conn = get_db_connection()
        subs_count = conn.execute('SELECT COUNT(*) FROM subsections WHERE section_id = ?', (section[0],)).fetchone()[0]
        posts_count = conn.execute('''
            SELECT COUNT(*) FROM posts p 
            JOIN subsections s ON p.subsection_id = s.id 
            WHERE s.section_id = ?
        ''', (section[0],)).fetchone()[0]
        conn.close()
        
        section_name = safe_get(section, 1, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        keyboard.append([InlineKeyboardButton(
            f"{section_name} ({subs_count} –ø–æ–¥—Ä–∞–∑., {posts_count} –∑–∞–ø.)", 
            callback_data=f"view_section_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ
async def view_subsections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass
    
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    section = cursor.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    subsections = cursor.execute(
        'SELECT * FROM subsections WHERE section_id = ? ORDER BY id', 
        (section_id,)
    ).fetchall()
    conn.close()
    
    if not section:
        await query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    section_name = safe_get(section, 1, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    if not subsections:
        keyboard = [
            [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"create_subsection_{section_id}")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"edit_section_{section_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"delete_section_{section_id}")],
            [InlineKeyboardButton("üìÇ –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data='view_sections')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–í —Ä–∞–∑–¥–µ–ª–µ '{section_name}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª!",
            reply_markup=reply_markup
        )
        return
    
    keyboard = []
    for subsection in subsections:
        conn = get_db_connection()
        posts_count = conn.execute('SELECT COUNT(*) FROM posts WHERE subsection_id = ?', (subsection[0],)).fetchone()[0]
        conn.close()
        
        subsection_name = safe_get(subsection, 2, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        keyboard.append([InlineKeyboardButton(
            f"{subsection_name} ({posts_count} –∑–∞–ø.)", 
            callback_data=f"view_subsection_{subsection[0]}"
        )])
    
    keyboard.extend([
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"create_subsection_{section_id}")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"edit_section_{section_id}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"delete_section_{section_id}")],
        [InlineKeyboardButton("üìÇ –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data='view_sections')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìÅ –†–∞–∑–¥–µ–ª: {section_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ
async def view_subsection_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass
    
    subsection_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    subsection = cursor.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    if not subsection:
        await query.edit_message_text("‚ùå –ü–æ–¥—Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return
    
    section = cursor.execute('SELECT * FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    posts = cursor.execute(
        'SELECT * FROM posts WHERE subsection_id = ? ORDER BY created_at DESC', 
        (subsection_id,)
    ).fetchall()
    conn.close()
    
    if not section:
        await query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    section_name = safe_get(section, 1, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    subsection_name = safe_get(subsection, 2, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    if not posts:
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add_post_{subsection_id}")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"edit_subsection_{subsection_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"delete_subsection_{subsection_id}")],
            [InlineKeyboardButton("üìÅ –ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º", callback_data=f"view_section_{section[0]}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìÅ –†–∞–∑–¥–µ–ª: {section_name}\n"
            f"üìÇ –ü–æ–¥—Ä–∞–∑–¥–µ–ª: {subsection_name}\n\n"
            f"–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å!",
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    context.user_data['current_subsection'] = subsection_id
    context.user_data['current_post_index'] = 0
    context.user_data['posts'] = posts
    
    await show_post(update, context, subsection, section, posts[0], 0, len(posts))

async def show_post(update: Update, context: ContextTypes.DEFAULT_TYPE, subsection, section, post, index, total):
    query = update.callback_query
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏
    section_name = safe_get(section, 1, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    subsection_name = safe_get(subsection, 2, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    post_title = safe_get(post, 4, "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    post_content = safe_get(post, 6, "")
    post_author = safe_get(post, 3, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    post_date = safe_get(post, 10, "")
    link_url = safe_get(post, 8, "")
    link_title = safe_get(post, 9, "")
    
    post_text = f"üìÅ {section_name} ‚Üí {subsection_name}\n\n"
    post_text += f"üìå {post_title}\n\n"
    
    if post_content:
        post_text += f"{post_content}\n\n"
    
    if link_url and link_title:
        post_text += f"üîó {link_title}\n{link_url}\n\n"
    
    post_text += f"üë§ –ê–≤—Ç–æ—Ä: {post_author}\n"
    if post_date:
        post_text += f"üìÖ {post_date}\n"
    post_text += f"üìä ({index + 1}/{total})"
    
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–ø–∏—Å—è–º
    nav_buttons = []
    if index > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"prev_post_{index}"))
    if index < total - 1:
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"next_post_{index}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–ø–∏—Å—å—é
    keyboard.extend([
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"edit_post_{post[0]}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"delete_post_{post[0]}")],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"add_post_{subsection[0]}")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"edit_subsection_{subsection[0]}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"delete_subsection_{subsection[0]}")],
        [InlineKeyboardButton("üìÇ –ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º", callback_data=f"view_section_{section[0]}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
    image_file_id = safe_get(post, 7, "")
    if image_file_id:
        try:
            await query.edit_message_media(
                media=InputMediaPhoto(media=image_file_id, caption=post_text),
                reply_markup=reply_markup
            )
        except:
            await query.edit_message_text(post_text, reply_markup=reply_markup)
    else:
        await query.edit_message_text(post_text, reply_markup=reply_markup)

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–ø–∏—Å—è–º
async def navigate_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass
    
    action, index = query.data.split('_')[0], int(query.data.split('_')[-1])
    
    subsection_id = context.user_data['current_subsection']
    posts = context.user_data['posts']
    
    conn = get_db_connection()
    cursor = conn.cursor()
    subsection = cursor.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    section = cursor.execute('SELECT * FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    conn.close()
    
    if action == 'prev':
        new_index = index - 1
    else:  # next
        new_index = index + 1
    
    context.user_data['current_post_index'] = new_index
    await show_post(update, context, subsection, section, posts[new_index], new_index, len(posts))

# –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
async def create_subsection_choose_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass
    
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    keyboard = []
    for section in sections:
        section_name = safe_get(section, 1, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        keyboard.append([InlineKeyboardButton(
            section_name, 
            callback_data=f"create_subsection_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("üìÅ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
async def create_subsection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass
    
    section_id = int(query.data.split('_')[-1])
    context.user_data['creating_subsection'] = {'section_id': section_id}
    
    conn = get_db_connection()
    section = cursor.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    conn.close()
    
    if not section:
        await query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    section_name = safe_get(section, 1, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    await query.edit_message_text(
        f"üìÅ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ:** {section_name}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞:"
    )
    context.user_data['awaiting_subsection_name'] = True

# –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
async def add_post_choose_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass
    
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    keyboard = []
    for section in sections:
        section_name = safe_get(section, 1, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        keyboard.append([InlineKeyboardButton(
            section_name, 
            callback_data=f"add_post_choose_subsection_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –í—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
async def add_post_choose_subsection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass
    
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    subsections = conn.execute('SELECT * FROM subsections WHERE section_id = ? ORDER BY id', (section_id,)).fetchall()
    section = conn.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    conn.close()
    
    if not section:
        await query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    section_name = safe_get(section, 1, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    if not subsections:
        await query.edit_message_text(
            f"–í —Ä–∞–∑–¥–µ–ª–µ '{section_name}' –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª."
        )
        return
    
    keyboard = []
    for subsection in subsections:
        subsection_name = safe_get(subsection, 2, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        keyboard.append([InlineKeyboardButton(
            subsection_name, 
            callback_data=f"add_post_{subsection[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='add_post_choose_section')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–∑–¥–µ–ª:** {section_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

# –ù–ê–ß–ê–õ–û –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–ü–ò–°–ò - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
async def add_post_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()
    except:
        pass
    
    subsection_id = int(query.data.split('_')[-1])
    context.user_data['adding_post'] = {
        'subsection_id': subsection_id,
        'step': 'title'
    }
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
    subsection = cursor.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    
    if not subsection:
        await query.edit_message_text("‚ùå –ü–æ–¥—Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        conn.close()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∞
    section = cursor.execute('SELECT * FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    conn.close()
    
    if not section:
        await query.edit_message_text("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    section_name = safe_get(section, 1, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    subsection_name = safe_get(subsection, 2, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    
    await query.edit_message_text(
        f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n"
        f"üìÅ –†–∞–∑–¥–µ–ª: {section_name}\n"
        f"üìÇ –ü–æ–¥—Ä–∞–∑–¥–µ–ª: {subsection_name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∏:"
    )

# [–û–°–¢–ê–í–®–ò–ï–°–Ø –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô...]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
async def setup_bot(token: str):
    init_db()
    
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries
    application.add_handler(CallbackQueryHandler(view_sections, pattern='^view_sections$'))
    application.add_handler(CallbackQueryHandler(view_subsections, pattern='^view_section_'))
    application.add_handler(CallbackQueryHandler(view_subsection_posts, pattern='^view_subsection_'))
    application.add_handler(CallbackQueryHandler(navigate_posts, pattern='^(prev|next)_post_'))
    application.add_handler(CallbackQueryHandler(create_subsection_choose_section, pattern='^create_subsection_choose_section$'))
    application.add_handler(CallbackQueryHandler(create_subsection, pattern='^create_subsection_'))
    application.add_handler(CallbackQueryHandler(add_post_choose_section, pattern='^add_post_choose_section$'))
    application.add_handler(CallbackQueryHandler(add_post_choose_subsection, pattern='^add_post_choose_subsection_'))
    application.add_handler(CallbackQueryHandler(add_post_start, pattern='^add_post_'))
    application.add_handler(CallbackQueryHandler(create_section, pattern='^create_section$'))
    application.add_handler(CallbackQueryHandler(manage_content, pattern='^manage_content$'))
    application.add_handler(CallbackQueryHandler(manage_sections, pattern='^manage_sections$'))
    application.add_handler(CallbackQueryHandler(edit_section, pattern='^edit_section_'))
    application.add_handler(CallbackQueryHandler(delete_section, pattern='^delete_section_'))
    application.add_handler(CallbackQueryHandler(confirm_delete_section, pattern='^confirm_delete_section_'))
    application.add_handler(CallbackQueryHandler(handle_content_type, pattern='^content_type_'))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern='^back_to_main$'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    print("‚úÖ Bot setup completed")
    return application
    
