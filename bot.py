import logging
import sqlite3
import os
import time
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if not TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Environment Variables –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render")
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
    time.sleep(10)
    sys.exit(1)

print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {TOKEN[:10]}...")

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'clan_bot.db')

def get_db_connection():
    return sqlite3.connect(DB_PATH, check_same_thread=False)

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            created_by INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS subsections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            section_id INTEGER,
            name TEXT NOT NULL,
            description TEXT,
            created_by INTEGER,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (section_id) REFERENCES sections (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            subsection_id INTEGER,
            user_id INTEGER,
            user_name TEXT,
            title TEXT NOT NULL,
            content_type TEXT CHECK(content_type IN ('text', 'image', 'link', 'mixed')),
            content_text TEXT,
            image_file_id TEXT,
            link_url TEXT,
            link_title TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (subsection_id) REFERENCES subsections (id)
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    cursor.execute('''
        INSERT OR IGNORE INTO sections (id, name, description) 
        VALUES 
            (1, 'üìö –ì–∞–π–¥—ã –ø–æ –∏–≥—Ä–µ', '–ü–æ–ª–µ–∑–Ω—ã–µ –≥–∞–π–¥—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏'),
            (2, '‚öîÔ∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–±–æ—Ä–æ–∫', '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π'),
            (3, 'üìù –ó–∞–º–µ—Ç–∫–∏ –∫–ª–∞–Ω–∞', '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∫–∏'),
            (4, 'üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏', '–°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
    cursor.execute('''
        INSERT OR IGNORE INTO subsections (id, section_id, name, description) 
        VALUES 
            (1, 1, 'üéØ –û—Å–Ω–æ–≤—ã –∏–≥—Ä—ã', '–ë–∞–∑–æ–≤—ã–µ –≥–∞–π–¥—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'),
            (2, 1, 'üèÜ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤'),
            (3, 2, '‚öîÔ∏è PvP —Å–±–æ—Ä–∫–∏', '–°–±–æ—Ä–∫–∏ –¥–ª—è –∞—Ä–µ–Ω—ã'),
            (4, 2, 'üêâ PvE —Å–±–æ—Ä–∫–∏', '–°–±–æ—Ä–∫–∏ –¥–ª—è –ø—Ä–æ—Ç–∏–≤ –±–æ—Å—Å–æ–≤'),
            (5, 3, 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è', '–í–∞–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–ª–∞–Ω–∞'),
            (6, 3, 'üí° –ò–¥–µ–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–ª–∞–Ω–∞'),
            (7, 4, 'üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã', '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã –∏ —Å–æ—Ü—Å–µ—Ç–∏'),
            (8, 4, 'üõ†Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–≥—Ä—ã')
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data='create_section')],
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data='create_subsection_choose_section')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    user = update.effective_user
    await update.message.reply_text(
        f'üè∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}, –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞ Sons of Garitos!\n\n'
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã, –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞!',
        reply_markup=reply_markup
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–¥–µ–ª–æ–≤
async def view_sections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    conn = get_db_connection()
    cursor = conn.cursor()
    sections = cursor.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    if not sections:
        await query.edit_message_text("–†–∞–∑–¥–µ–ª—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
        return
    
    keyboard = []
    for section in sections:
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∑–∞–ø–∏—Å–µ–π
        conn = get_db_connection()
        subs_count = conn.execute('SELECT COUNT(*) FROM subsections WHERE section_id = ?', (section[0],)).fetchone()[0]
        posts_count = conn.execute('''
            SELECT COUNT(*) FROM posts p 
            JOIN subsections s ON p.subsection_id = s.id 
            WHERE s.section_id = ?
        ''', (section[0],)).fetchone()[0]
        conn.close()
        
        keyboard.append([InlineKeyboardButton(
            f"{section[1]} ({subs_count} –ø–æ–¥—Ä–∞–∑., {posts_count} –∑–∞–ø.)", 
            callback_data=f"view_section_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ
async def view_subsections(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    section = cursor.execute('SELECT * FROM sections WHERE id = ?', (section_id,)).fetchone()
    subsections = cursor.execute(
        'SELECT * FROM subsections WHERE section_id = ? ORDER BY id', 
        (section_id,)
    ).fetchall()
    conn.close()
    
    if not subsections:
        keyboard = [
            [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"create_subsection_{section_id}")],
            [InlineKeyboardButton("üìÇ –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data='view_sections')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"–í —Ä–∞–∑–¥–µ–ª–µ '{section[1]}' –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.\n\n"
            f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª!",
            reply_markup=reply_markup
        )
        return
    
    keyboard = []
    for subsection in subsections:
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ
        conn = get_db_connection()
        posts_count = conn.execute('SELECT COUNT(*) FROM posts WHERE subsection_id = ?', (subsection[0],)).fetchone()[0]
        conn.close()
        
        keyboard.append([InlineKeyboardButton(
            f"{subsection[2]} ({posts_count} –∑–∞–ø.)", 
            callback_data=f"view_subsection_{subsection[0]}"
        )])
    
    keyboard.extend([
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data=f"create_subsection_{section_id}")],
        [InlineKeyboardButton("üìÇ –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data='view_sections')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìÅ –†–∞–∑–¥–µ–ª: {section[1]}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ
async def view_subsection_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    subsection_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    subsection = cursor.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    section = cursor.execute('SELECT * FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    posts = cursor.execute(
        'SELECT * FROM posts WHERE subsection_id = ? ORDER BY created_at DESC', 
        (subsection_id,)
    ).fetchall()
    conn.close()
    
    if not posts:
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å", callback_data=f"add_post_to_{subsection_id}")],
            [InlineKeyboardButton("üìÅ –ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º", callback_data=f"view_section_{section[0]}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìÅ {section[1]} ‚Üí {subsection[2]}\n\n"
            f"–í —ç—Ç–æ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.\n"
            f"–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏—Ç –º–∞—Ç–µ—Ä–∏–∞–ª!",
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
    await show_post(query, posts[0], 0, len(posts), subsection_id)

# –ü–æ–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
async def show_post(query, post, current_index, total_posts, subsection_id):
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
    if total_posts > 1:
        nav_buttons = []
        if current_index > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav_post_{subsection_id}_{current_index-1}"))
        nav_buttons.append(InlineKeyboardButton(f"{current_index + 1}/{total_posts}", callback_data="noop"))
        if current_index < total_posts - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"nav_post_{subsection_id}_{current_index+1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ –∏ —Ä–∞–∑–¥–µ–ª–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    section_id = subsection[1]
    conn.close()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.extend([
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Å—é–¥–∞", callback_data=f"add_post_to_{subsection_id}")],
        [InlineKeyboardButton("üìÅ –ö –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞–º", callback_data=f"view_section_{section_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    content_parts = []
    
    if post[6]:  # content_text
        content_parts.append(f"üìù {post[6]}")
    
    if post[7]:  # image_file_id
        content_parts.append("üñºÔ∏è –ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    if post[8]:  # link_url
        link_display = post[9] if post[9] else post[8]
        content_parts.append(f"üîó {link_display}")
    
    content_display = "\n".join(content_parts) if content_parts else "üìÑ –¢–µ–∫—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å"
    
    caption = (
        f"üìñ **{post[4]}**\n\n"  # title
        f"{content_display}\n\n"
        f"üë§ –ê–≤—Ç–æ—Ä: {post[3]}\n"  # user_name
        f"üìÖ {post[10]}\n"  # created_at
        f"üìä –¢–∏–ø: {post[5]}\n"  # content_type
    )
    
    try:
        if post[7]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞
            await query.message.reply_photo(
                photo=post[7],
                caption=caption,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            await query.message.delete()
        else:
            await query.edit_message_text(
                caption, 
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}",
            reply_markup=reply_markup
        )

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∑–∞–ø–∏—Å—è–º
async def navigate_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    _, _, subsection_id, index = query.data.split('_')
    subsection_id = int(subsection_id)
    index = int(index)
    
    conn = get_db_connection()
    posts = conn.execute(
        'SELECT * FROM posts WHERE subsection_id = ? ORDER BY created_at DESC', 
        (subsection_id,)
    ).fetchall()
    conn.close()
    
    if posts and 0 <= index < len(posts):
        await show_post(query, posts[index], index, len(posts), subsection_id)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
async def create_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üèóÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:"
    )
    context.user_data['awaiting_section_name'] = True

# –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
async def create_subsection_choose_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    keyboard = []
    for section in sections:
        keyboard.append([InlineKeyboardButton(
            section[1], 
            callback_data=f"create_subsection_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("üìÅ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
async def create_subsection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    section_id = int(query.data.split('_')[-1])
    context.user_data['creating_subsection'] = {'section_id': section_id}
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    conn = get_db_connection()
    section = conn.execute('SELECT name FROM sections WHERE id = ?', (section_id,)).fetchone()
    conn.close()
    
    await query.edit_message_text(
        f"üìÅ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ:** {section[0]}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞:"
    )
    context.user_data['awaiting_subsection_name'] = True

# –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
async def add_post_choose_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    conn = get_db_connection()
    sections = conn.execute('SELECT * FROM sections ORDER BY id').fetchall()
    conn.close()
    
    keyboard = []
    for section in sections:
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
        conn = get_db_connection()
        subs_count = conn.execute('SELECT COUNT(*) FROM subsections WHERE section_id = ?', (section[0],)).fetchone()[0]
        conn.close()
        
        keyboard.append([InlineKeyboardButton(
            f"{section[1]} ({subs_count} –ø–æ–¥—Ä–∞–∑.)", 
            callback_data=f"add_post_choose_subsection_{section[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –í—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
async def add_post_choose_subsection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    section_id = int(query.data.split('_')[-1])
    
    conn = get_db_connection()
    subsections = conn.execute('SELECT * FROM subsections WHERE section_id = ? ORDER BY id', (section_id,)).fetchall()
    section = conn.execute('SELECT name FROM sections WHERE id = ?', (section_id,)).fetchone()
    conn.close()
    
    keyboard = []
    for subsection in subsections:
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        conn = get_db_connection()
        posts_count = conn.execute('SELECT COUNT(*) FROM posts WHERE subsection_id = ?', (subsection[0],)).fetchone()[0]
        conn.close()
        
        keyboard.append([InlineKeyboardButton(
            f"{subsection[2]} ({posts_count} –∑–∞–ø.)", 
            callback_data=f"add_post_to_{subsection[0]}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º", callback_data='add_post_choose_section')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–∑–¥–µ–ª:** {section[0]}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup
    )

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ - –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def start_add_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    subsection_id = int(query.data.split('_')[-1])
    context.user_data['adding_post'] = {'subsection_id': subsection_id}
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ –∏ —Ä–∞–∑–¥–µ–ª–µ
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (subsection_id,)).fetchone()
    section = conn.execute('SELECT name FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    conn.close()
    
    keyboard = [
        [InlineKeyboardButton("üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data='content_type_text')],
        [InlineKeyboardButton("üñºÔ∏è –¢–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∞", callback_data='content_type_image')],
        [InlineKeyboardButton("üîó –¢–µ–∫—Å—Ç + —Å—Å—ã–ª–∫–∞", callback_data='content_type_link')],
        [InlineKeyboardButton("üé® –í—Å–µ –≤–º–µ—Å—Ç–µ", callback_data='content_type_mixed')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_post_choose_subsection_{subsection[1]}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏**\n\n"
        f"–†–∞–∑–¥–µ–ª: {section[0]}\n"
        f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª: {subsection[2]}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async def choose_content_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    content_type = query.data.replace('content_type_', '')
    context.user_data['adding_post']['content_type'] = content_type
    
    await query.edit_message_text(
        "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:**"
    )
    context.user_data['awaiting_post_title'] = True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    user = update.effective_user
    
    if user_data.get('awaiting_section_name'):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
        section_name = update.message.text
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO sections (name, description, created_by) VALUES (?, ?, ?)',
            (section_name, "–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞", user.id)
        )
        conn.commit()
        conn.close()
        
        user_data.clear()
        await update.message.reply_text(f"‚úÖ –†–∞–∑–¥–µ–ª '{section_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        await show_main_menu(update, context)
    
    elif user_data.get('awaiting_subsection_name'):
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
        subsection_name = update.message.text
        section_id = user_data['creating_subsection']['section_id']
        
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO subsections (section_id, name, description, created_by) VALUES (?, ?, ?, ?)',
            (section_id, subsection_name, "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞", user.id)
        )
        conn.commit()
        conn.close()
        
        user_data.clear()
        await update.message.reply_text(f"‚úÖ –ü–æ–¥—Ä–∞–∑–¥–µ–ª '{subsection_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        await show_main_menu(update, context)
    
    elif user_data.get('awaiting_post_title'):
        # –ü–æ–ª—É—á–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å–∏
        user_data['adding_post']['title'] = update.message.text
        user_data['awaiting_post_title'] = False
        
        content_type = user_data['adding_post']['content_type']
        
        if content_type in ['text', 'link']:
            # –î–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Å—ã–ª–æ–∫ —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            user_data['awaiting_post_text'] = True
            if content_type == 'link':
                await update.message.reply_text(
                    "‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:"
                )
            else:
                await update.message.reply_text(
                    "‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:"
                )
        elif content_type in ['image', 'mixed']:
            # –î–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            user_data['awaiting_post_image'] = True
            await update.message.reply_text(
                "‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏ üì∑"
            )
    
    elif user_data.get('awaiting_post_text'):
        # –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏
        user_data['adding_post']['content_text'] = update.message.text
        user_data['awaiting_post_text'] = False
        
        content_type = user_data['adding_post']['content_type']
        
        if content_type == 'link':
            # –î–ª—è —Å—Å—ã–ª–æ–∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL
            user_data['awaiting_post_link'] = True
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (URL):"
            )
        else:
            # –î–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            await save_post_to_db(update, context)
    
    elif user_data.get('awaiting_post_link'):
        # –ü–æ–ª—É—á–∏–ª–∏ —Å—Å—ã–ª–∫—É
        link_text = update.message.text
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL
        if link_text.startswith(('http://', 'https://')):
            user_data['adding_post']['link_url'] = link_text
            user_data['awaiting_post_link'] = False
            user_data['awaiting_post_link_title'] = True
            
            await update.message.reply_text(
                "‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å URL –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ):"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://)\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
    
    elif user_data.get('awaiting_post_link_title'):
        # –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        if update.message.text != '/skip':
            user_data['adding_post']['link_title'] = update.message.text
        else:
            user_data['adding_post']['link_title'] = user_data['adding_post']['link_url']
        
        user_data['awaiting_post_link_title'] = False
        await save_post_to_db(update, context)
    
    elif user_data.get('awaiting_post_content_after_image'):
        # –ü–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        user_data['adding_post']['content_text'] = update.message.text
        user_data['awaiting_post_content_after_image'] = False
        
        content_type = user_data['adding_post']['content_type']
        
        if content_type == 'mixed':
            # –î–ª—è mixed —Ç–∏–ø–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞
            user_data['awaiting_post_link'] = True
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (URL) –∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
            )
        else:
            # –î–ª—è image —Ç–∏–ø–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            await save_post_to_db(update, context)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
async def save_post_to_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    user = update.effective_user
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    content_type = user_data['adding_post']['content_type']
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        '''INSERT INTO posts 
        (subsection_id, user_id, user_name, title, content_type, content_text, image_file_id, link_url, link_title) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)''',
        (
            user_data['adding_post']['subsection_id'],
            user.id,
            user.full_name,
            user_data['adding_post']['title'],
            content_type,
            user_data['adding_post'].get('content_text'),
            user_data['adding_post'].get('image_file_id'),
            user_data['adding_post'].get('link_url'),
            user_data['adding_post'].get('link_title')
        )
    )
    conn.commit()
    conn.close()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ –∏ —Ä–∞–∑–¥–µ–ª–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    conn = get_db_connection()
    subsection = conn.execute('SELECT * FROM subsections WHERE id = ?', (user_data['adding_post']['subsection_id'],)).fetchone()
    section = conn.execute('SELECT name FROM sections WHERE id = ?', (subsection[1],)).fetchone()
    conn.close()
    
    user_data.clear()
    
    content_types = {
        'text': 'üìù —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å',
        'image': 'üñºÔ∏è –∑–∞–ø–∏—Å—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π',
        'link': 'üîó –∑–∞–ø–∏—Å—å —Å–æ —Å—Å—ã–ª–∫–æ–π',
        'mixed': 'üé® –∑–∞–ø–∏—Å—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —Å—Å—ã–ª–∫–æ–π'
    }
    
    await update.message.reply_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ {content_types[content_type]} –≤ –ø–æ–¥—Ä–∞–∑–¥–µ–ª '{subsection[2]}' —Ä–∞–∑–¥–µ–ª–∞ '{section[0]}'!"
    )
    await show_main_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    
    if user_data.get('awaiting_post_image'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –∫–∞—Ä—Ç–∏–Ω–∫–∏
        photo_file_id = update.message.photo[-1].file_id
        user_data['adding_post']['image_file_id'] = photo_file_id
        user_data['awaiting_post_image'] = False
        
        content_type = user_data['adding_post']['content_type']
        
        if content_type == 'mixed':
            user_data['awaiting_post_content_after_image'] = True
            await update.message.reply_text(
                "üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏:"
            )
        else:
            # –î–ª—è —Ç–∏–ø–∞ image —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            await save_post_to_db(update, context)

# –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
async def skip_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    
    if user_data.get('awaiting_post_link'):
        user_data['awaiting_post_link'] = False
        await save_post_to_db(update, context)

# –ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def noop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update, context):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data='create_section')],
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data='create_subsection_choose_section')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text('üè∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞ Sons of Garitos:', reply_markup=reply_markup)

async def show_main_menu_from_query(query):
    keyboard = [
        [InlineKeyboardButton("üìö –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª—ã", callback_data='view_sections')],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data='create_section')],
        [InlineKeyboardButton("üìÅ –°–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", callback_data='create_subsection_choose_section')],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='add_post_choose_section')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text('üè∞ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–ª–∞–Ω–∞:', reply_markup=reply_markup)

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await show_main_menu_from_query(query)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ Sons of Garitos...")
    
    if not TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä—Å–∏–∏ 20.0
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("skip", skip_link))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries
    application.add_handler(CallbackQueryHandler(view_sections, pattern='^view_sections$'))
    application.add_handler(CallbackQueryHandler(create_section, pattern='^create_section$'))
    application.add_handler(CallbackQueryHandler(create_subsection_choose_section, pattern='^create_subsection_choose_section$'))
    application.add_handler(CallbackQueryHandler(create_subsection, pattern='^create_subsection_'))
    application.add_handler(CallbackQueryHandler(add_post_choose_section, pattern='^add_post_choose_section$'))
    application.add_handler(CallbackQueryHandler(add_post_choose_subsection, pattern='^add_post_choose_subsection_'))
    application.add_handler(CallbackQueryHandler(start_add_post, pattern='^add_post_to_'))
    application.add_handler(CallbackQueryHandler(choose_content_type, pattern='^content_type_'))
    application.add_handler(CallbackQueryHandler(view_subsections, pattern='^view_section_'))
    application.add_handler(CallbackQueryHandler(view_subsection_posts, pattern='^view_subsection_'))
    application.add_handler(CallbackQueryHandler(navigate_post, pattern='^nav_post_'))
    application.add_handler(CallbackQueryHandler(back_to_main, pattern='^back_to_main$'))
    application.add_handler(CallbackQueryHandler(noop, pattern='^noop$'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()
